name: üê∂ Run Robowoofy

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  run-woofy:
    if: startsWith(github.event.comment.body, '/run')
    runs-on: ubuntu-latest

    steps:
      - name: React to comment with eyes
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: eyes
      
      - name: React to comment with rocket
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: rocket
      
      - name: Post start progress
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.comment.id }}
          body: |
            > üöÄ Agent **GitHub Actions ${{ github.run_id }}** has picked up this request
            > Follow progress [here](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

      - name: Parse command
        id: parse
        run: |
          comment="${{ github.event.comment.body }}"
          echo "Comment: $comment"

          FN="woofy"
          NETWORK="eth"
          SEND="false"

          for arg in $comment; do
            case "$arg" in
              fn=*) FN="${arg#fn=}" ;;
              network=*) NETWORK="${arg#network=}" ;;
              send=*) SEND="${arg#send=}" ;;
            esac
          done

          echo "fn=$FN" >> $GITHUB_OUTPUT
          echo "network=$NETWORK" >> $GITHUB_OUTPUT
          echo "send=$SEND" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: 'refs/pull/${{ github.event.issue.number }}/head'

      - name: Build Docker image
        run: docker build -t robowoofy-ng .

      - name: Create .env file
        run: |
          echo "ROBOWOOFY_SIGNER_PK=${{ secrets.ROBOWOOFY_SIGNER_PK }}" > .env
          echo "ETHERSCAN_TOKEN=${{ secrets.ETHERSCAN_TOKEN }}" >> .env
          echo "TG_BOT_ACCESS_TOKEN=${{ secrets.TG_BOT_ACCESS_TOKEN }}" >> .env
          echo "TG_GROUP_CHAT_ID=${{ secrets.TG_GROUP_CHAT_ID }}" >> .env
          echo "ETH_RPC_URL=${{ secrets.ETH_RPC_URL }}" >> .env
          echo "GITHUB_REPOSITORY=${{ github.repository }}" >> .env
          echo "GITHUB_RUN_ID=${{ github.run_id }}" >> .env
          echo "GITHUB_PR_NUMBER=${{ github.event.issue.number }}" >> .env
          echo "GITHUB_PR_AUTHOR=${{ github.event.comment.user.login }}" >> .env
          echo "GITHUB_PR_TITLE=${{ github.event.issue.title }}" >> .env
          echo "GITHUB_PR_BODY=${{ github.event.issue.body }}" >> .env
          echo "NETWORK=${{ steps.parse.outputs.network }}" >> .env

      - name: Run Robowoofy
        id: run_woofy
        run: |
          set -o pipefail
          echo "Running Robowoofy with parameters:"
          echo "Function: ${{ steps.parse.outputs.fn }}"
          echo "Network: ${{ steps.parse.outputs.network }}"
          echo "Send: ${{ steps.parse.outputs.send }}"

          docker run --rm \
            --env-file .env \
            -v ${{ github.workspace }}:/robowoofy-ng \
            robowoofy-ng \
            bash -c "
              brownie networks import ./network-config.yaml && \
              SEND=${{ steps.parse.outputs.send }} brownie run src/woof.py ${{ steps.parse.outputs.fn }} \
                --network ${{ steps.parse.outputs.network }}-fork
            " | tee run_output.log

      - name: Extract nonce + prepare clean log
        id: post
        if: always()
        run: |
          NONCE="$(grep -Eo 'ROBOWOOFY_NONCE=[0-9]+' run_output.log | head -n1 | cut -d= -f2 || true)"
          echo "nonce=${NONCE:-unknown}" >> $GITHUB_OUTPUT

          echo 'log<<EOF' >> $GITHUB_OUTPUT
          cat run_output.log | sed -r "s/\x1B\[[0-9;]*[a-zA-Z]//g" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Update comment with output
        if: always()
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.comment.id }}
          body: |
            ${{ 
              steps.run_woofy.outcome == 'success' && steps.parse.outputs.send == 'true'
              && format('> ‚úÖ txn with nonce {0} successfully queued. Find output logs below. Your PR has been labeled with tag **{1} #{0}**', steps.post.outputs.nonce, steps.parse.outputs.network)
              || (steps.run_woofy.outcome == 'success' && steps.parse.outputs.send != 'true'
                  && '> ‚úÖ Dry run success. See full output below. Rerun with `send=true` to queue the txn')
              || '> ‚ùå Run failed. See logs below'
            }}

            **Output:**
            ```
            ${{ steps.post.outputs.log }}

      - name: React to comment with hooray
        if: ${{ steps.run_woofy.outcome == 'success' }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: hooray

      - name: Add network label (only if closing)
        if: ${{ steps.run_woofy.outcome == 'success' && steps.parse.outputs.send == 'true' }}
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: "${{ steps.parse.outputs.network }} #${{ steps.post.outputs.nonce }}"
      
      - name: Close PR if success & send=true
        if: ${{ steps.run_woofy.outcome == 'success' && steps.parse.outputs.send == 'true' }}
        uses: peter-evans/close-issue@v3
        with:
          issue-number: ${{ github.event.issue.number }}

      - name: Cleanup .env
        if: always()
        run: rm -f .env